// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

// Feel free to change this version of Solidity. We support >=0.6.0 <0.7.0;
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries
import {
    BaseStrategy,
    StrategyParams
} from "@yearnvaults/contracts/BaseStrategy.sol";
import {
    SafeERC20,
    SafeMath,
    IERC20,
    Address
} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/math/Math.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "../interfaces/<protocol>/<Interface>.sol";
import "../interfaces/protocol.sol";
import "../interfaces/uniswap.sol";

contract StrategyTest is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    address public wantPool;
    address public rewardToken;
    address public lpToken;

    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

    constructor(
        address _vault,
        address _wantPool,
        address _rewardToken,
        address _unirouter,
        address _lpToken
    ) public BaseStrategy(_vault) {
        // You can set these parameters on deployment to whatever you want

        require(
            address(wantPool) == address(0),
            "StrategyTest already initialized"
        );

        wantPool = _wantPool;
        rewardToken = _rewardToken;
        unirouter = _unirouter;
        lpToken = _lpToken;

        IERC20(want).safeApprove(wantPool, uint256(-1));
        IERC20(rewardToken).safeApprove(unirouter, uint256(-1));
    }

    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {
        // Add your own name here, suggestion e.g. "StrategyCreamYFI"
        return "StrategyTest";
    }

    function estimatedTotalAssets() public view override returns (uint256) {
        // TODO: Build a more accurate estimate using the value of all positions in terms of `want`
        uint256 poolValue = convertToWant(balanceOfPool(), address(lpToken));
        return balanceOfWant().add(poolValue);
    }

    function prepareReturn(uint256 _debtOutstanding)
        internal
        override
        returns (
            uint256 _profit,
            uint256 _loss,
            uint256 _debtPayment
        )
    {
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position
 
        // We might need to return want to the vault
        if (_debtOutstanding > 0) {
            uint256 _amountFreed = 0;
            (_amountFreed, _loss) = liquidatePosition(_debtOutstanding);
            _debtPayment = Math.min(_amountFreed, _debtOutstanding);
        }

        // harvest() will track profit by estimated total assets compared to debt.
        uint256 balanceOfWantBefore = balanceOfWant();
        uint256 debt = vault.strategies(address(this)).totalDebt;

        uint256 currentValue = estimatedTotalAssets();

        // If we win we will have more value than debt!
        // Let's convert lpTokens to want to calculate profit.
        if (currentValue > debt) {
            uint256 _amount = currentValue.sub(debt);
            liquidatePosition(_amount);
        }

        // claims reward tokens from protocol
        IProtocol(wantPool).claimRewards();

        uint256 _tokensAvailable = IERC20(rewardToken).balanceOf(address(this));
        if (_tokensAvailable > 0) {
            _swap(_tokensAvailable, address(rewardToken));
        }

        uint256 balanceOfWantAfter = balanceOfWant();

        if (balanceOfWantAfter > balanceOfWantBefore) {
            _profit = balanceOfWantAfter.sub(balanceOfWantBefore);
        }
    }

    function adjustPosition(uint256 _debtOutstanding) internal override {
        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)
        
        //emergency exit is dealt with in prepareReturn
        if (emergencyExit) {
            return;
        }

        uint256 _balanceOfWant = balanceOfWant();

        // do not invest if we have more debt than want
        if (_debtOutstanding > _balanceOfWant) {
            return;
        }

        // Invest the rest of the want
        uint256 _wantAvailable = _balanceOfWant.sub(_debtOutstanding);
        if (_wantAvailable > 0) {
            IProtocol(wantPool).deposit(
                _wantAvailable
            );
        }
    }

    function liquidatePosition(uint256 _amountNeeded)
        internal
        override
        returns (uint256 _liquidatedAmount, uint256 _loss)
    {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        uint256 _balanceOfWant = balanceOfWant();
        if (_balanceOfWant < _amountNeeded) {
            // We need to withdraw to get back more want
            _withdrawSome(_amountNeeded.sub(_balanceOfWant));
            // reload balance of want after side effect
            _balanceOfWant = balanceOfWant();
        }

        if (_balanceOfWant < _amountNeeded) {
            _liquidatedAmount = _balanceOfWant;
            _loss = _amountNeeded.sub(_balanceOfWant);
        } else {
            _liquidatedAmount = _amountNeeded;
        }
    }

    // withdraw some want from the liquidity pool
    function _withdrawSome(uint256 _amount) internal returns (uint256) {
        uint256 balanceOfWantBefore = balanceOfWant();

        IProtocol(wantPool).withdraw(_amount);

        return balanceOfWant().sub(balanceOfWantBefore);
    }

    function liquidateAllPositions() internal override returns (uint256 _amountFreed) {

        (_amountFreed, ) = liquidatePosition(1e36); //we can request a lot. dont use max because of overflow
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
        // want is transferred by the base contract's migrate function
        IERC20(rewardToken).transfer(
            _newStrategy,
            IERC20(rewardToken).balanceOf(address(this))
        );
        IERC20(lpToken).transfer(
            _newStrategy,
            IERC20(lpToken).balanceOf(address(this))
        );
    }

    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    {
        address[] memory protected = new address[](2);
        // (aka want) is already protected by default
        protected[0] = lpToken;
        protected[1] = rewardToken;
        return protected;
    }

    // returns balance of total lp tokens
    function balanceOfPool() public view returns (uint256) {
        return IERC20(lpToken).balanceOf(address(this));
    }

    // returns balance of want token
    function balanceOfWant() public view returns (uint256) {
        return want.balanceOf(address(this));
    }

    // swaps reward tokens for want
    function _swap(uint256 _amountIn, address _token) internal {
        bool is_weth = address(want) == weth;
        address[] memory path = new address[](is_weth ? 2 : 3);
        path[0] = _token;
        path[1] = weth;
        if (!is_weth) {
            path[2] = address(want);
        }
        IUniswap(unirouter).swapExactTokensForTokens(
            _amountIn,
            0,
            path,
            address(this),
            now
        );
    }

    // get the corresponding amount of lp tokens for want
    function convertToWant(uint256 _amount, address _token) internal view returns (uint256) {
        bool is_weth = address(want) == weth;
        address[] memory path = new address[](is_weth ? 2 : 3);
        path[0] = _token;
        if (is_weth) {
            path[1] = weth;
        } else {
            path[1] = weth;
            path[2] = address(want);
        }
        return IUniswap(unirouter).getAmountsOut(_amount, path)[path.length - 1];
    }

}
